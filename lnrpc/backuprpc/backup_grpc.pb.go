// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package backuprpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackupClient is the client API for Backup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackupClient interface {
	SubscribeBackupEvents(ctx context.Context, in *BackupEventSubscription, opts ...grpc.CallOption) (Backup_SubscribeBackupEventsClient, error)
}

type backupClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupClient(cc grpc.ClientConnInterface) BackupClient {
	return &backupClient{cc}
}

func (c *backupClient) SubscribeBackupEvents(ctx context.Context, in *BackupEventSubscription, opts ...grpc.CallOption) (Backup_SubscribeBackupEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Backup_ServiceDesc.Streams[0], "/backuprpc.Backup/SubscribeBackupEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &backupSubscribeBackupEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backup_SubscribeBackupEventsClient interface {
	Recv() (*BackupEventUpdate, error)
	grpc.ClientStream
}

type backupSubscribeBackupEventsClient struct {
	grpc.ClientStream
}

func (x *backupSubscribeBackupEventsClient) Recv() (*BackupEventUpdate, error) {
	m := new(BackupEventUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackupServer is the server API for Backup service.
// All implementations must embed UnimplementedBackupServer
// for forward compatibility
type BackupServer interface {
	SubscribeBackupEvents(*BackupEventSubscription, Backup_SubscribeBackupEventsServer) error
	mustEmbedUnimplementedBackupServer()
}

// UnimplementedBackupServer must be embedded to have forward compatible implementations.
type UnimplementedBackupServer struct {
}

func (UnimplementedBackupServer) SubscribeBackupEvents(*BackupEventSubscription, Backup_SubscribeBackupEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBackupEvents not implemented")
}
func (UnimplementedBackupServer) mustEmbedUnimplementedBackupServer() {}

// UnsafeBackupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackupServer will
// result in compilation errors.
type UnsafeBackupServer interface {
	mustEmbedUnimplementedBackupServer()
}

func RegisterBackupServer(s grpc.ServiceRegistrar, srv BackupServer) {
	s.RegisterService(&Backup_ServiceDesc, srv)
}

func _Backup_SubscribeBackupEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BackupEventSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackupServer).SubscribeBackupEvents(m, &backupSubscribeBackupEventsServer{stream})
}

type Backup_SubscribeBackupEventsServer interface {
	Send(*BackupEventUpdate) error
	grpc.ServerStream
}

type backupSubscribeBackupEventsServer struct {
	grpc.ServerStream
}

func (x *backupSubscribeBackupEventsServer) Send(m *BackupEventUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// Backup_ServiceDesc is the grpc.ServiceDesc for Backup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backuprpc.Backup",
	HandlerType: (*BackupServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeBackupEvents",
			Handler:       _Backup_SubscribeBackupEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backuprpc/backup.proto",
}
